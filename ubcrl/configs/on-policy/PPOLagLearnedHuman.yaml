defaults:
  # seed for random number generator
  seed: 2
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
    warmup_epochs: null
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 10
#    update_iters: 20
    # batch size for each iteration
#    batch_size: 64
    batch_size: 32
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
#    entropy_coef: 0.0
#    entropy_coef: 0.01
    entropy_coef: 0.001
    # normalize reward
    reward_normalize: True
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    hidden_obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
#    max_grad_norm: 40.0
    max_grad_norm: 0.5
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
    # lagrange window length
    lagrange_window: 50
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
    log_trajs: False
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
#    weight_initialization_mode: "xavier_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # obs encoder layer sizes
      obs_encoder: []
      h_encoder: []
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
#      activation: tanh
      activation: relu
      obs_encoder_activation: identity
      h_encoder_activation: identity
      out_activation: identity
      # learning rate
      # TEST
      lr: 0.0003
      last_layer_init_weight: 0.01
    critic:
      # obs encoder layer sizes
      obs_encoder: []
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
#      activation: tanh
      activation: relu
      obs_encoder_activation: identity
      h_encoder_activation: identity
      out_activation: identity
      # learning rate
      lr: 0.0003
    cost_critic:
      # obs encoder layer sizes
      obs_encoder: []
      h_encoder: []
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
#      activation: tanh
      activation: relu
      obs_encoder_activation: identity
      h_encoder_activation: identity
      out_activation: identity
      # learning rate
#      lr: 0.0003
      # TEST
      lr: 0.0003
      cost_normalize: True
      # use critic norm
      use_critic_norm: True
      # critic norm coefficient
      critic_norm_coef: 0.01
    classifier:
      pt_file: null
      pt_model_type: "DistributionGRU"
      train_dataset: null
      test_dataset: null
      hidden_dim: 4
      stack_layer: 1
      decoder_arch: [16, 16]
#      loc_offset: 3.0
#      log_std_offset: 0.0
#      lr: 0.001
      lr: 0.0003
      batchsize: 32
      dropout: 0.0
#      retrain_min_abs_cv: 0.005
#      retrain_num_traj: 2
      retrain_traj_prop: 0.1
#      max_retrain_epoch: 5
      max_retrain_epoch: 1
      retrain_target_acc: 0.975
#      min_retrain_trajs: 40
#      min_retrain_trajs: 20
      min_retrain_trajs: 2
      random_retrain_traj: null
#      save_dir: null
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
#    cost_limit: 0.0513
#    cost_limit: 0.1054
    cost_limit: -0.9
    # Initial value of lagrangian multiplier
#    lagrangian_multiplier_init: 0.001
    lagrangian_multiplier_init: 1.0
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
#    lambda_lr: 0.07
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
#    use_max_grad_norm: True
#    max_grad_norm: 1.0
  # environment specific configurations
  env_cfgs: {}

SafetyHalfCheetahVelocity-v1:
  train_cfgs:
    # number of vectorized environments
    vector_env_nums: 1
    # total number of steps to train
#    total_steps: 10000
    total_steps: 15000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 150
  # model configurations
  model_cfgs:
    actor:
      lr: 0.0003
    classifier:
#      pt_file: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyHalfCheetahVelocity-v1_DistributionGRU_16_2_128.pt"
#      train_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyHalfCheetahVelocity-v1_traindataset.pt"
#      test_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyHalfCheetahVelocity-v1_testdataset.pt"
      lr: 0.0003
#      random_retrain_traj: 0.35
#      retrain_min_abs_cv: 0.0
  env_cfgs: {max_episode_steps: 150, render_mode: 'rgb_array'}

SafetyHopperVelocity-v1:
  train_cfgs:
    # number of vectorized environments
    vector_env_nums: 1
    # total number of steps to train
    total_steps: 15000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 150
  # model configurations
  model_cfgs:
    actor:
      lr: 0.0003
    classifier:
#      pt_file: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_DistributionGRU_16_2_128.pt"
#      train_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_traindataset.pt"
#      test_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_testdataset.pt"
      lr: 0.0003
#      random_retrain_traj: 0.6
#      retrain_min_abs_cv: 0.0
  # environment specific configurations
  env_cfgs: {terminate_when_unhealthy: False, max_episode_steps: 150, render_mode: 'rgb_array'}

SafetyWalker2dVelocity-v1:
  train_cfgs:
    # number of vectorized environments
    vector_env_nums: 1
    # total number of steps to train
    total_steps: 15000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 150
  # model configurations
  model_cfgs:
    actor:
      lr: 0.0003
    classifier:
#      pt_file: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_DistributionGRU_16_2_128.pt"
#      train_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_traindataset.pt"
#      test_dataset: "/common/home/users/s/smlow.2020/ubcrl_expt/classifier/learnedH/model/08-05-2025/SafetyWalker2dVelocity-v1_testdataset.pt"
      lr: 0.0003
#      random_retrain_traj: 0.6
#      retrain_min_abs_cv: 0.0
  # environment specific configurations
  env_cfgs: {terminate_when_unhealthy: False, max_episode_steps: 150, render_mode: 'rgb_array'}

parking-v0:
  train_cfgs:
    vector_env_nums: 10
#    total_steps: 160000
    total_steps: 120000
#    total_steps: 1600
    warmup_epochs: 300
#    warmup_epochs: 1
  algo_cfgs:
    batch_size: 64
    # number of steps to update the policy
#    steps_per_epoch: 400
    steps_per_epoch: 300
    update_iters: 10
#    entropy_coef: 0.001
    entropy_coef: 0.0
    reward_normalize: False
    cost_normalize: False
    obs_normalize: False
    hidden_obs_normalize: False
    gamma: 0.8
    cost_gamma: 0.8
    lam: 0.8
    lam_c: 0.8
  model_cfgs:
    actor:
      hidden_sizes: [256, 256]
      out_activation: tanh
      lr: 0.0005
    critic:
      hidden_sizes: [256, 256]
      lr: 0.0005
    cost_critic:
      hidden_sizes: [256, 256]
      lr: 0.0005
      cost_normalize: False
      critic_norm_coef: 0.01
    classifier:
      hidden_dim: 4
      lr: 0.0003
      dropout: 0.0
  lagrange_cfgs:
    lagrangian_multiplier_init: 1.0
  env_cfgs: {render_mode: 'rgb_array'}
