defaults:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetySwimmerVelocity-v1:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetySwimmerVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetySwimmerVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetySwimmerVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetySwimmerVelocity-v1/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyHopperVelocity-v1:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHopperVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyHopperVelocity-v1/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyHalfCheetahVelocity-v1:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHalfCheetahVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHalfCheetahVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyHalfCheetahVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyHalfCheetahVelocity-v1/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyWalker2dVelocity-v1:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyWalker2dVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyWalker2dVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyWalker2dVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyWalker2dVelocity-v1/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyAntVelocity-v1:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyAntVelocity-v1_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyAntVelocity-v1_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/24-11-2024/SafetyAntVelocity-v1_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyAntVelocity-v1/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyPointCircle1-v0:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle1-v0_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle1-v0_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle1-v0_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyPointCircle1-v0/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyPointCircle2-v0:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle2-v0_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle2-v0_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyPointCircle2-v0_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyPointCircle2-v0/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyCarCircle1-v0:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle1-v0_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle1-v0_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle1-v0_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyCarCircle1-v0/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafetyCarCircle2-v0:
  # seed for random number generator
  seed: 0
  # training configurations
  train_cfgs:
    # device to use for training, options: cpu, cuda, cuda:0, cuda:0,1, etc.
    device: cpu
    # number of threads for torch
    torch_threads: 16
    # number of vectorized environments
    vector_env_nums: 1
    # number of parallel agent, similar to a3c
    parallel: 1
    # total number of steps to train
    total_steps: 10000000
  # algorithm configurations
  algo_cfgs:
    # number of steps to update the policy
    steps_per_epoch: 20000
    # number of iterations to update the policy
    update_iters: 40
    # batch size for each iteration
    batch_size: 64
    # target kl divergence
    target_kl: 0.02
    # entropy coefficient
    entropy_coef: 0.0
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: False
    # normalize observation
    obs_normalize: True
    # early stop when kl divergence is bigger than target kl
    kl_early_stop: True
    # use max gradient norm
    use_max_grad_norm: True
    # max gradient norm
    max_grad_norm: 40.0
    # use critic norm
    use_critic_norm: True
    # critic norm coefficient
    critic_norm_coef: 0.001
    # reward discount factor
    gamma: 0.99
    # cost discount factor
    cost_gamma: 0.99
    # lambda for gae
    lam: 0.95
    # lambda for cost gae
    lam_c: 0.95
    # clip ratio
    clip: 0.2
    # advantage estimation method, options: gae, retrace
    adv_estimation_method: gae
    # standardize reward advantage
    standardized_rew_adv: True
    # standardize cost advantage
    standardized_cost_adv: True
    # penalty coefficient
    penalty_coef: 0.0
    # use cost
    use_cost: True
  # logger configurations
  logger_cfgs:
    # use wandb for logging
    use_wandb: False
    # wandb project name
    wandb_project: omnisafe
    # use tensorboard for logging
    use_tensorboard: True
    # save model frequency
    save_model_freq: 100
    # save logger path
    log_dir: "./runs"
    # save model path
    window_lens: 100
  # model configurations
  model_cfgs:
    # weight initialization mode
    weight_initialization_mode: "kaiming_uniform"
    # actor type, options: gaussian, gaussian_learning
    actor_type: gaussian_learning
    # linear learning rate decay
    linear_lr_decay: True
    # exploration noise anneal
    exploration_noise_anneal: False
    # std upper bound, and lower bound
    std_range: [0.5, 0.1]
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # out_activation: tanh
      # learning rate
      lr: 0.0003
    critic:
      # hidden layer sizes
      hidden_sizes: [64, 64]
      # activation function
      activation: tanh
      # learning rate
      lr: 0.0003
    classifier:
      pt_file: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle2-v0_CostBudgetMLP_128.pt"
      train_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle2-v0_CostBudgetMLP_traindataset.pt"
      test_dataset: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/model/26-11-2024/SafetyCarCircle2-v0_CostBudgetMLP_testdataset.pt"
      decoder_arch: [64, 64]
      lr: 0.001
      save_dir: "/SSD2/siowmeng/ubcrl_expt/classifier/learnedBC/classifier_pts/SafetyCarCircle2-v0/"
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 25.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.001
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.035
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"
  # environment specific configurations
  env_cfgs: {}

SafeMetaDrive:
  # training configurations
  train_cfgs:
    # total number of steps to train
    total_steps: 500000
  # logger configurations
  logger_cfgs:
    # save model frequency
    save_model_freq: 15
  # algorithm configurations
  algo_cfgs:
    # batch size for each iteration
    batch_size: 256
    # entropy coefficient
    entropy_coef: 0.01
    # number of steps to update the policy
    steps_per_epoch: 3000
    # number of iterations to update the policy
    update_iters: 40
    # normalize reward
    reward_normalize: False
    # normalize cost
    cost_normalize: True
    # normalize observation
    obs_normalize: False
    # max gradient norm
    max_grad_norm: 0.05
  # model configurations
  model_cfgs:
    # actor network configurations
    actor:
      # hidden layer sizes
      hidden_sizes: [256, 256]
      # learning rate
      lr: 0.00005
    # critic network configurations
    critic:
      # hidden layer sizes
      hidden_sizes: [256, 256]
      # learning rate
      lr: 0.00005
  # environment specific configurations
  env_cfgs:
  # safe meta drive configurations. More details refer to https://github.com/decisionforce/EGPO
    meta_drive_config:
      # max iterations of interactions
      horizon: 1500
      # whether to use random traffic
      random_traffic: False
      # the penalty when crash into other vehicles
      crash_vehicle_penalty: 1.
      # the penalty when crash into other objects
      crash_object_penalty: 0.5
      # the penalty when out of road
      out_of_road_penalty: 1.
  # lagrangian configurations
  lagrange_cfgs:
    # Tolerance of constraint violation
    cost_limit: 0.0
    # Initial value of lagrangian multiplier
    lagrangian_multiplier_init: 0.01
    # Learning rate of lagrangian multiplier
    lambda_lr: 0.01
    # Type of lagrangian optimizer
    lambda_optimizer: "Adam"